//random function helpers
// fxrand() gives u a value between 0 and 1
// rnd_btw(a,b) gives u a value between a and b
// rnd_btwexp(a,b) gives u a value between a and b, but with an exponential slope (more probable to get the borders than the center)
// rnd_int(a,b) gives u an integer value between a and b

//FUNÇÃO DE REFERÊNCIA PARA RANDOMIZAÇÃO INTERVALAR

function rnd_btw(min, max) {
  return fxrand() * (max - min) + min;
}

function rnd_btwexp(min, max) {
  return fxrand() ** 2 * (max - min) + min;
}

function rnd_int(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(fxrand() * (max - min + 1)) + min;
}
console.log(fxrand())


r =10
g =100
k =1000
intensidade = rnd_int(250, 950);
mode = rnd_int(1,30)
Rarityintensidade = intensidade / 10

RarityMode = mode * 3
window.$fxhashFeatures = {
  "Rarity": RarityMode,
  "intensity": Rarityintensidade

}


function setup() {
  createCanvas(windowWidth, windowHeight);
  pixelDensity(1);
  
}

function draw() {
  var maxiterations = 100;

  loadPixels();
  
  for(var x = 0; x < width; x++){
    for(var y = 0; y < height; y++){
      var a = map(x, 0, width, -3.0, 3.0);
      var b = map(y, 0, height, -2.5, 2.5);  

      var ca = a;
      var cb = b; 
      
      
      var n = 0; 
      var z = 0;
      
      while(n < maxiterations){
        var aa = a*a - b*b;
        var bb = 2 * a * b;
        a = aa + ca;
        b = bb + cb;
        
        if(abs(a + b) > 16){
          break;  
        }
        n++;
      }
      
      var bright = map(n, 0, 100, 0, 255); 
      if(n === maxiterations){
        bright = 0;
      }
      var pix = (x + y * width) * 4;
      

      switch (mode) {
        case 1:
          for(let j = 0; j < 10; j++){
            pixels[pix + 0] = bright * r
            pixels[pix + 1] = bright * g
            pixels[pix + 2] = bright * k
            pixels[pix + 3] = intensidade;
          }
          
          break;
        case 2:
          for(let j = 0; j < 10; j++){
            pixels[pix + 0] = bright * r  
            pixels[pix + 1] = bright + x + g + g/g;
            pixels[pix + 2] = bright * k
            pixels[pix + 3] = intensidade;
          }
          break;
        case 3:
          for(let j = 0; j < 10; j++){
            pixels[pix + 0] = bright * r  
            pixels[pix + 1] = bright * g
            pixels[pix + 2] = bright + y - k*k;
            pixels[pix + 3] = intensidade;
          }
          break;
        case 4:
          
          for(let j = 0; j < 10; j++){
            pixels[pix + 0] = bright + x + r  + r/r  
            pixels[pix + 1] = bright * g
            pixels[pix + 2] = bright * k
            pixels[pix + 3] = intensidade;
          }
          break;

        case 5:
          for(let j = 0; j < 10; j++){
            pixels[pix + 0] = bright + r;
            pixels[pix + 1] = bright + g;
            pixels[pix + 2] = bright + k;
            pixels[pix + 3] = intensidade;
          }
          break;

        
        case 6:
          for(let j = 0; j < 10; j++){
            pixels[pix + 0] = bright * r /10  
            pixels[pix + 1] = bright + (x + g + g) /10 ;
            pixels[pix + 2] = bright + (y - k) /10 
            pixels[pix + 3] = intensidade;
          }
          break;
        
        case 7:
          for(let j = 0; j < 10; j++){
            pixels[pix + 0] = bright
            pixels[pix + 1] = bright + (x + g + g) /10 ;
            pixels[pix + 2] = bright + (y - k) /10 
            pixels[pix + 3] = intensidade;
          }
          break;

        
        case 8:
          for(let j = 0; j < 10; j++){
            pixels[pix + 0] = bright * r / 10
            pixels[pix + 1] = bright 
            pixels[pix + 2] = bright + (y - k)  
            pixels[pix + 3] = intensidade;
          }
          break;
        
        case 9:
          for(let j = 0; j < 10; j++){
            pixels[pix + 0] = bright * r 
            pixels[pix + 1] = bright + (x + g + g) /10 ;
            pixels[pix + 2] = bright   
            pixels[pix + 3] = intensidade;
          }
          break;

        
        case 10:
          for(let j = 0; j < 10; j++){
            pixels[pix + 0] = bright + r*r / x 
            pixels[pix + 1] = bright + g*g / x 
            pixels[pix + 2] = bright  + k*k / x 
            pixels[pix + 3] = intensidade;
          }
          break;

        
        case 11:
          for(let j = 0; j < 10; j++){
            pixels[pix + 0] = bright 
            pixels[pix + 1] = bright + g*g / x 
            pixels[pix + 2] = bright  + k*k / x 
            pixels[pix + 3] = intensidade;
          }
          break;

        
        case 12:
          for(let j = 0; j < 10; j++){
            pixels[pix + 0] = bright + r*r / x 
            pixels[pix + 1] = bright 
            pixels[pix + 2] = bright  + k*k / x 
            pixels[pix + 3] = intensidade;
         }
          break;

        
        case 13:
          for(let j = 0; j < 10; j++){
            pixels[pix + 0] = bright + r*r / x 
            pixels[pix + 1] = bright + g*g / y 
            pixels[pix + 2] = bright  
            pixels[pix + 3] = intensidade;
          }
          break;

        
        case 14:
          for(let j = 0; j < 10; j++){
            pixels[pix + 0] = bright + r*r / y
            pixels[pix + 1] = bright + g*g / x 
            pixels[pix + 2] = bright  
            pixels[pix + 3] = intensidade;
          }
          break;

        
        case 15:
          for(let j = 0; j < 10; j++){
            pixels[pix + 0] = bright //+ r*r / y
            pixels[pix + 1] = bright //+ g*g / x 
            pixels[pix + 2] = bright  + k*k / x 
            pixels[pix + 3] = intensidade;
          }
          break;

        
        case 16:
          for(let j = 0; j < 10; j++){
            pixels[pix + 0] = bright + r/r / y
            pixels[pix + 1] = bright + g/g / x 
            pixels[pix + 2] = bright  + k/k / x 
            pixels[pix + 3] = intensidade;
          }
          break;


        
        case 17:
          for(let j = 0; j < 10; j++){
            pixels[pix + 0] = bright - r/r * y + (y / y * y)
            pixels[pix + 1] = bright - g/g * x 
            pixels[pix + 2] = bright - k/k * y 
            pixels[pix + 3] = intensidade;
         }
          break;

        
        case 18:
          for(let j = 0; j < 10; j++){
            pixels[pix + 0] = bright - r/r * y 
            pixels[pix + 1] = bright - g/g * x + (x / x * x)
            pixels[pix + 2] = bright - k/k * y 
            pixels[pix + 3] = intensidade;
          }
          break;

        
        case 19:
          for(let j = 0; j < 10; j++){
            pixels[pix + 0] = bright - r/r * y 
            pixels[pix + 1] = bright - g/g * x //+ (x / x * x)
            pixels[pix + 2] = bright - k/k * y + (y / y * y)
            pixels[pix + 3] = intensidade;
          }
          break;

        
        case 20:
          for(let j = 0; j < 10; j++){
            pixels[pix + 0] = bright - r/r * y 
            pixels[pix + 1] = bright - g/g * x + (x / x * x)
            pixels[pix + 2] = bright - k/k * y + (y / y * y)
            pixels[pix + 3] = intensidade;
          }
          break;


        
        case 21:
          for(let j = 0; j < 10; j++){
            pixels[pix + 0] = bright - r/r * y + (y / y * y)
            pixels[pix + 1] = bright - g/g * x + (x / x * x)
            pixels[pix + 2] = bright - k/k * y 
            pixels[pix + 3] = intensidade;
          }
          break;

        
        case 22:
          for(let j = 0; j < 10; j++){
            pixels[pix + 0] = bright - r/r * y + (y / y * y)
            pixels[pix + 1] = bright - g/g * x 
            pixels[pix + 2] = bright - k/k * y + (y / y * y)
            pixels[pix + 3] = intensidade;
          }
          break;

        
        case 23:
          for(let j = 0; j < 10; j++){
            pixels[pix + 0] = bright - (r/r * y + (k / k * k))/10
            pixels[pix + 1] = bright - g/g * x //+ (x / x * x)
            pixels[pix + 2] = bright - k/k * (y + (r / r * r)) *10
            pixels[pix + 3] = intensidade;
          }
          break;

        
        case 24:
          for(let j = 0; j < 10; j++){
            pixels[pix + 0] = bright - (r/r * y + (k / k * k))/10
            pixels[pix + 1] = bright - (g/g * x + (x / x * x))/10
            pixels[pix + 2] = bright - (k/k * y + (r / r * r))*10
            pixels[pix + 3] = intensidade;
          }
          break;

        
        case 25:
          for(let j = 0; j < 10; j++){
            pixels[pix + 0] = bright -  (k / k * k)/10
            pixels[pix + 1] = bright -  (x / x * x)/10
            pixels[pix + 2] = bright - (r / r * r)*10
            pixels[pix + 3] = intensidade;
          }

          break;

        
        case 26:
          for(let j = 0; j < 10; j++){
            pixels[pix + 0] = bright +  (k / k * k)/10
            pixels[pix + 1] = bright +  (x / x * x)/10
            pixels[pix + 2] = bright + (r / r * r)*10
            pixels[pix + 3] = intensidade;
          }
          break;

        
        case 27:
          for(let j = 0; j < 10; j++){
            pixels[pix + 0] = bright -  (k / k * k)/10
            pixels[pix + 1] = bright +  (x / x * x)/10
            pixels[pix + 2] = bright - (r / r * r)*10
            pixels[pix + 3] = intensidade;
          }
          break;

        
        case 28:
          for(let j = 0; j < 10; j++){
            pixels[pix + 0] = bright +  (k / k * k)/10
            pixels[pix + 1] = bright -  (x / x * x)/10
            pixels[pix + 2] = bright + (r / r * r)*10
            pixels[pix + 3] = intensidade;
          }
          break;
        
        
        
          case 29:
            for(let j = 0; j < 10; j++){
              pixels[pix + 0] = bright + x + g + g/g; 
              pixels[pix + 1] = bright * r 
              pixels[pix + 2] = bright * k + (x / x * x)/10
              pixels[pix + 3] = intensidade;
            }
            break;

          
        case 30:
          for(let j = 0; j < 10; j++){
            pixels[pix + 0] = bright  * k + (x / x * x)/10
            pixels[pix + 1] = bright * r 
            pixels[pix + 2] = bright + x + g + g/g;
            pixels[pix + 3] = intensidade;
          }
          break;
        
          default:
          //  

      }

    }
  }
  updatePixels();
  
}
